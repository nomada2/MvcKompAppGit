<html lang='en'>
<head>
    <title>Hello, Knockout.js</title>
    <meta charset='utf-8' />
    <link href="Content/style.css" rel="stylesheet" />

</head>
<body>
    <h1>Hello, Knockout.js</h1>

    <p><span data-bind="text:fullName"></span>'s Shopping Cart</p>


    <p data-bind="with: featuredProduct">
        Do you need <strong data-bind="text: name"></strong>?
        <br />
        Get one now for only <strong data-bind="text: price"></strong>.
    </p>


    <button data-bind="click:checkout">Checkout</button>
    <button data-bind='click:addProduct'>Add Beer</button>
    <button data-bind='click:debugItems'>Debug</button>

    <table>
        <thead>
            <tr>
                <th>Item number</th>
                <th>Product</th>
                <th>Price</th>
                <th>Tags</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody data-bind='foreach: shoppingCart'>
            <tr>
                <td data-bind='text: $index'></td>
                <td data-bind='text: name'></td>
                <td data-bind='text: price'></td>
                <td>
                    <ul data-bind="foreach: tags">
                        <li>
                            <span data-bind="text: $parent.name"></span>- <span data-bind="text: $data"></span>
                        </li>
                    </ul>
                </td>

                <td data-bind="if: discount() > 0, css:{supersaver: discount() > 0.15}" style="color: red">You saved <span data-bind="text: formattedDiscount"></span>!!!
                </td>
                <!-- Using if binding: -->
<td data-bind="if: discount() > 0" style="color: red"></td>
<!-- Using visible binding: -->
<td data-bind='visible: discount() > 0' style='color: red; display: none'>
You saved <span data-bind='text: formattedDiscount'></span>!!! </td>

                <td>
                    <!--Because we’re in the foreach context, we had to use the $root reference to access our ViewModel instead of the current item in the loop. If we tried to call removeProduct() without this reference, Knockout.js would have attempted to call the method on the Product class, which doesn’t exist. All of the available binding contexts for foreach are covered in the next chapter.-->
                    <button data-bind='click: $root.removeProduct'>Remove</button>
                </td>
            </tr>
        </tbody>
    </table>
    <script src="Scripts/knockout-2.1.0.js"></script>

    <script type='text/javascript'>
        function Product(name, price, tags, discount) {
            this.name = ko.observable(name);
            this.price = ko.observable(price);

            tags = typeof (tags) !== "undefined" ? tags : [];
            this.tags = ko.observableArray(tags);

            discount = typeof (discount) !== "undefined" ? discount : 0;
            //console.log(discount);
            this.discount = ko.observable(discount);
            this.formattedDiscount = ko.computed(function () {
                return (this.discount() * 100) + "%";
            }, this);
        }

        /*The $root Property
        The $root context always refers to the top-level ViewModel, regardless of loops or other changes in scope. As we saw in the previous chapter, this makes it possible to access top-level methods for manipulating the ViewModel.
        
        The $data Property
        The $data property in a binding context refers to the ViewModel object for the current context. It’s a lot like the this keyword in a JavaScript object. For example, inside of our foreach: shoppingCart loop, $data refers to the current list item.
        
        The $index Property
        Inside of a foreach loop, the $index property contains the current item’s index in the array. Like most things in Knockout.js, the value of $index will update automatically whenever you add or delete an item from the associated observable array. This is a useful property if you need to display the index of each item.

        The $parent Property
The $parent property refers to the parent ViewModel object. Typically, you’ll only need this when you’re working with nested loops and you need to access properties in the outer loop. 

        */
        function PersonViewModel() {
            var self = this;

            this.firstName = ko.observable("John");
            this.lastName = ko.observable("Smith");
            this.checkout = function () {
                alert("Trying to checkout");
            };
            this.fullName = ko.computed(function () {
                return this.firstName() + " " + this.lastName();
            }, this);

            this.shoppingCart = ko.observableArray([
                new Product("Beer", 10.99, null, 0.2),
                new Product("Brats", 7.99, null, 0.1),
                new Product("Buns", 1.49, ["Baked goods", "Hot dogs"])
            ]);

            this.addProduct = function () {
                this.shoppingCart.push(new Product("More beer", 10.99));
            };

            this.removeProduct = function (product) {
                self.shoppingCart.destroy(product);
                alert(self.shoppingCart().length);
                alert(product._destroy);
            };

            this.debugItems = function () {
                var message = "";
                var nativeArray = self.shoppingCart();
                for (var i = 0; i < nativeArray.length; i++) {
                    message += nativeArray[i].name() + "\n"; // don't forget that you make a function call when accessing observable properties
                }
                alert(message);
            }
            ;

            var featured = new Product("Acme BBQ Sauce", 3.99);
            this.featuredProduct = ko.observable(featured);
        };

        var vm = new PersonViewModel();
        ko.applyBindings(vm);
    </script>

</body>
</html>
